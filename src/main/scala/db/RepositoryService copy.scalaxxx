package userlogin.db

import userlogin.types._

import zio.*
import pdi.jwt.{Jwt, JwtAlgorithm, JwtClaim}
import java.time.Instant

import io.getquill.*
import io.getquill.jdbczio.*
import io.getquill.autoQuote

case class RepositoryService private(quill: Quill.Sqlite[SnakeCase]){
  import quill.*

  private inline def queryUser = quote(querySchema[User](entity = "users"))


  type UserQuery = Quoted[Query[User]]
  private def buildQuery
    (crq: UserQuery )
    = crq

  def saveNewUser
    (username: String, password: UserPassword) : Task[Option[User]]
    = run {
      queryUser
      .insert
      ( _.username -> lift(username)run(query[User])
      , _.password -> lift(password)
      )
      .returningGenerated(_.id)
    }

  def getUser
    (username: String, password: UserPassword) : Option[User]
    =

    val userQuery
      = queryUser
      .filter(x
        => x.username == username
        && x.password == password
      )

    run(queryUser)
    .map(_.headOption)
    .map(_.map(user))

  def getAllUsers
    : List[User] = run(query[User])
}
.
object RepositoryService {
  val live = ZLayer.derive[RepositoryService]
}
