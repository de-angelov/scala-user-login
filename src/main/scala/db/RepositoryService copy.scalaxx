package userlogin.db

import userlogin.types._

import zio.*
import pdi.jwt.{Jwt, JwtAlgorithm, JwtClaim}
import java.time.Instant

import io.getquill.*
import io.getquill.jdbczio.*

case class UserRow
  ( username: String
  , id: Int
  , password: String
  )

val dbrowToUser
  : UserRow => User
  = u => User(
    id =u.id,
    password = HashedPassword(u.password),
    username = u.username
  )

case class RepositoryService private(quill: Quill.Postgres[SnakeCase]){
  import quill.*

  private inline def queryUser
    = quote(querySchema[UserRow](entity = "users"))
    .map(dbrowToUser)

  def saveNewUser(username: String, password: UserPassword): Task[Option[Int]] = ???

  def getUser(username: String, password: HashedPassword): Task[Option[User]] = ???

  // def saveNewUser
  //   (username: String, password: UserPassword): Task[Option[Int]]
  //   =
  //     val pass = HashedPassword.toString(HashedPassword.hash(password))

  //     run {
  //     queryUser
  //     .insert
  //       (_.username -> lift(username)
  //       , _.password -> lift(pass)
  //       )
  //     .returningGenerated(_.id)
  //   }
  //   .option

  // def getUser
  //   (username: String, password: HashedPassword): Task[Option[User]]
  //   = run{
  //     queryUser
  //     .filter(x => x.username == username && x.password == password)
  //   }
  //   .map{
  //       case x :: xs  => Some(x: User)
  //       case _ => None
  //     }

  // def getAllUsers: Task[List[User]] = run(queryUser)
  def getAllUsers = run(queryUser)


}

object RepositoryService {
  val live = ZLayer.derive[RepositoryService]
}
